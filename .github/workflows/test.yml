name: Run Tests

on:
  push:
    branches: [ kkaitepalli/tests ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-type: ["unit", "integration"]
        include:
          - test-type: "unit"
            pytest-args: "-m 'not integration and not docker'"
          - test-type: "integration" 
            pytest-args: "-m 'integration'"

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Docker Buildx
        if: matrix.test-type == 'integration'
        uses: docker/setup-buildx-action@v3

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: Install package in development mode
        run: |
          pip install -e .

      - name: Build Docker images for integration tests
        if: matrix.test-type == 'integration'
        run: |
          # Build the shell server image needed for Docker tests
          docker build -f src/microbots/environment/local_docker/image_builder/Dockerfile -t kavyasree261002/shell_server:latest .
          # Build the kavya-local image if needed
          docker build -f src/microbots/environment/local_docker/image_builder/Dockerfile -t kavya-local .

      - name: Run ${{ matrix.test-type }} tests
        env:
          # OpenAI API Configuration
          OPEN_AI_KEY: ${{ secrets.OPEN_AI_KEY }}
          OPEN_AI_DEPLOYMENT_NAME: ${{ secrets.OPEN_AI_DEPLOYMENT_NAME }}
          OPEN_AI_END_POINT: ${{ secrets.OPEN_AI_END_POINT }}
          # Azure OpenAI API Configuration
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        run: |
          python -m pytest ${{ matrix.pytest-args }} \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results-${{ matrix.test-type }}-py${{ matrix.python-version }}.xml \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-py${{ matrix.python-version }}
          path: test-results-*.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.test-type }}-py${{ matrix.python-version }}
          path: coverage.xml

  docker-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: Install package in development mode
        run: |
          pip install -e .

      - name: Build Docker images
        run: |
          docker build -f src/microbots/environment/local_docker/image_builder/Dockerfile -t kavyasree261002/shell_server:latest .
          docker build -f src/microbots/environment/local_docker/image_builder/Dockerfile -t kavya-local .

      - name: Run Docker-specific tests
        env:
          # OpenAI API Configuration
          OPEN_AI_KEY: ${{ secrets.OPEN_AI_KEY }}
          OPEN_AI_DEPLOYMENT_NAME: ${{ secrets.OPEN_AI_DEPLOYMENT_NAME }}
          OPEN_AI_END_POINT: ${{ secrets.OPEN_AI_END_POINT }}
          # Azure OpenAI API Configuration
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        run: |
          python -m pytest -m docker \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results-docker.xml \
            -v \
            --timeout=600

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-docker
          path: test-results-docker.xml

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, docker-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: "test-results-*.xml"
          check_name: "Test Results Summary"
          comment_title: "Test Results"

      - name: Test Summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "| Unit & Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit & Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.docker-tests.result }}" = "success" ]; then
            echo "| Docker Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-tests.result }}" = "skipped" ]; then
            echo "| Docker Tests | ⏭️ Skipped (PR) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi